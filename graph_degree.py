# -*- coding: utf-8 -*-
"""graph_degree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mwrXGjRo9Bg9pI-SIzR_USt8iRb-lGEJ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline
import networkx as nx
from skimage.io import imread
from skimage.morphology import skeletonize
from visibility_graph import visibility_graph
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.svm import SVC
from sklearn import metrics
from ts2vg import NaturalVG
from ts2vg import HorizontalVG

def degree_distribution_feat(image):
    degree_nat = []
    degree_hor = []
    for i in range(N):
        series = image[i,:]
        nvg = NaturalVG()
        nvg.build(series)
        ng = nvg.as_networkx()
        degrees = [ng.degree(n) for n in ng.nodes()]
        degree_nat.append(degrees)
        hvg = HorizontalVG()
        hvg.build(series)
        hg = hvg.as_networkx()
        degrees_1 = [hg.degree(n) for n in hg.nodes()]
        degree_hor.append(degrees_1)
    #storing all rows in 64x64 array
    degree_nx_nat = np.array(degree_nat)
    degree_nx_hor = np.array(degree_hor)

    # for calculating degree for every column
    degree_1_nat = []
    degree_1_hor = []
    for i in range(N):
        series = image[:,i]
        nvg = NaturalVG()
        nvg.build(series)
        ng = nvg.as_networkx()
        degrees = [ng.degree(n) for n in ng.nodes()]
        degree_1_nat.append(degrees)
        hvg = HorizontalVG()
        hvg.build(series)
        hg = hvg.as_networkx()
        degrees_1 = [hg.degree(n) for n in hg.nodes()]
        degree_1_hor.append(degrees_1)
    #storing all column in 64x64 array
    degree_1_nx_nat = np.array(degree_1_nat)
    degree_1_nx_hor = np.array(degree_1_hor)

    # Storing both row degree and column degree in degree_201 64x64 array
    degree_201_nat = degree_nx_nat + degree_1_nx_nat
    degree_201_hor = degree_nx_hor + degree_1_nx_hor

    #degree_3 = []
    vgd_nat = np.zeros((N,N))
    vgd_hor = np.zeros((N,N))
    for i in range(-N+2,0,1):
        series = image[::-1,:].diagonal(i)
        vg = NaturalVG()
        vg.build(series)
        g = vg.as_networkx()
        degrees = [g.degree(n) for n in g.nodes()]
        index1 = i+(N-1)
        row_index , col_index = np.array(np.arange(index1,-1,-1)), np.array(np.arange(0,index1+1,1))
        vgd_nat[row_index,col_index] = degrees
        hvg = HorizontalVG()
        hvg.build(series)
        g1 = hvg.as_networkx()
        degrees = [g1.degree(n) for n in g1.nodes()]
        index1 = i+(N-1)
        row_index , col_index = np.array(np.arange(index1,-1,-1)), np.array(np.arange(0,index1+1,1))
        vgd_hor[row_index,col_index] = degrees

    for i in range(0,(N-1),1):
        series = image[::-1,:].diagonal(i)
        vg = NaturalVG()
        vg.build(series)
        g = vg.as_networkx()
        degrees = [g.degree(n) for n in g.nodes()]
        index1 = i
        row_index , col_index = np.array(np.arange(index1,N,1)), np.array(np.arange((N-1),index1-1,-1))
        vgd_nat[row_index,col_index] = degrees
        hvg = HorizontalVG()
        hvg.build(series)
        g1 = hvg.as_networkx()
        degrees = [g1.degree(n) for n in g1.nodes()]
        index1 = i
        row_index , col_index = np.array(np.arange(index1,N,1)), np.array(np.arange((N-1),index1-1,-1))
        vgd_hor[row_index,col_index] = degrees

    vgd_1_nat = np.zeros((N,N))
    vgd_1_hor = np.zeros((N,N))

    for i in range((N-2),0,-1):
        series = image.diagonal(i)
        vg = NaturalVG()
        vg.build(series)
        g = vg.as_networkx()
        degrees = [g.degree(n) for n in g.nodes()]
        index1 = -i + N
        row_index , col_index = np.array(np.arange(0,index1,1)), np.array(np.arange(i,N,1))
        vgd_1_nat[row_index,col_index] = degrees
        hvg = HorizontalVG()
        hvg.build(series)
        g1 = hvg.as_networkx()
        degrees = [g1.degree(n) for n in g1.nodes()]
        index1 = -i + N
        row_index, col_index = np.array(np.arange(0,index1,1)), np.array(np.arange(i,N,1))
        vgd_1_hor[row_index, col_index] = degrees


    for i in range(0,-(N-1),-1):
        series = image.diagonal(i)
        vg = NaturalVG()
        vg.build(series)
        g = vg.as_networkx()
        degrees = [g.degree(n) for n in g.nodes()]
        index1 = i + N
        row_index , col_index = np.array(np.arange(-i,N,1)), np.array(np.arange(0,index1,1))
        vgd_1_nat[row_index,col_index] = degrees
        hvg = HorizontalVG()
        hvg.build(series)
        g1 = hvg.as_networkx()
        degrees = [g1.degree(n) for n in g1.nodes()]
        index1 = i + N
        row_index , col_index = np.array(np.arange(-i,N,1)), np.array(np.arange(0,index1,1))
        vgd_1_hor[row_index,col_index] = degrees

    feature_mat_nat = degree_201_nat + vgd_nat + vgd_1_nat
    feature_mat_hor = degree_201_hor + vgd_hor + vgd_hor
    feature_mat_nat_hor = feature_mat_nat + feature_mat_hor
    feature_mat_nat = feature_mat_nat.flatten()
    feature_mat_hor = feature_mat_hor.flatten()
    feature_mat_nat_hor = feature_mat_nat_hor.flatten()
    return feature_mat_nat, feature_mat_hor, feature_mat_nat_hor
